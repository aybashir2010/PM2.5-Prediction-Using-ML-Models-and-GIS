data=original.n,
method = "nb",
tuneGrid=tune_gridNaive2,
metric= "Accuracy",
preProc = c("center", "scale"),
trControl = myControl,
importance = TRUE)
fit.nb2$results
var_impq <- varImp(fit.nb2, scale = TRUE)
var_impq <- partial(fit.nb2, pred.var = "B2Sp")
tune_gridNaive2 = expand.grid(fL= c(0) ,             # (Laplace Correction)
usekernel= TRUE,                     #(Distribution Type)
adjust= c(1)              #(Bandwidth Adjustment)
)
tune_gridNaive2 = expand.grid(fL= c(0) ,             # (Laplace Correction)
usekernel= TRUE,                     #(Distribution Type)
adjust= c(1)              #(Bandwidth Adjustment)
)
original.n$PM=original$Av_Lev_Spr
set.seed(849)
fit.nbAll<- train(PM~B2Sp+ B3Sp+ B4Sp +B5Sp+B6Sp+ BUSp+ LSTSp+NDMISp+
NDVISp+SAVISp+Slope,
data=original.n,
method = "nb",
metric= "Accuracy",
preProc = c("center", "scale"),
trControl = myControl,
tuneGrid = tune_gridNaive2,
tuneLength = 10,
importance = TRUE)
fit.nbAll$results
list.files( "C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images",pattern = "tif$", full.names = TRUE)
B2Sp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/B2_Sp.tif" )
names(B2Sp) = "B2Sp"
B3Sp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/B3_Sp.tif" )
names(B3Sp) = "B3Sp"
B4Sp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/B4_Sp.tif")
names(B4Sp) = "B4Sp"
B5Sp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/B5_Sp.tif")
names(B5Sp) = "B5Sp"
B6Sp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/B6_Sp.tif")
names(B6Sp) = "B6Sp"
BUSp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/BU_Sp.tif")
names(BUSp) = "BUSp"
DEM = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/DEM.tif")
LSTSp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/LST_Sp.tif")
names(LSTSp) = "LSTSp"
NDBISp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/NDBI_Sp.tif")
names(NDBISp) = "NDBISp"
NDMISp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/NDMI_Sp.tif")
names(NDMISp) = "NDMISp"
NDVISp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/NDVI_Sp.tif")
names(NDVISp) = "NDVISp"
distoroad = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/RdDen.tif")
SAVISp = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/SAVI_Sp.tif")
names(SAVISp) = "SAVISp"
Slope = raster("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Slope.tif")
names(Slope) = "Slope"
Study_area <- shapefile("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/CASESTUDY/BosniaP.shp")
#dis_to_road <- mask(crop(distoroad, Study_area), Study_area)
# stack multiple raster files
Rasters<- stack(B2Sp,B3Sp,B4Sp,B5Sp,B6Sp,BUSp,LSTSp,NDMISp,
NDVISp,SAVISp,Slope)
plot(Rasters$LSTSp)
names(Rasters)
Rasters.df = as.data.frame(Rasters, xy = TRUE, na.rm = TRUE)
head(Rasters.df,1)
#Rasters.df=Rasters.df[,c(-6)] #
# Now:Prediction using imported Rasters
Rasters.df_N <- Rasters.df[,c(-1,-2)] # remove x, y
# Data Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
# Keep the "LevelAve" variables since ita????s the response variable that needs to be predicted.
names(original)
Rasters.df_N_Nor <- as.data.frame(lapply(Rasters.df_N, normalize))
str(Rasters.df_N_Nor)
p3_nb_spr<-as.data.frame(predict(fit.nbAll, Rasters.df_N_Nor, type = "prob"))
p3_nb_spr
p3_nb_spr=as.data.frame(predict(fit.nbAll, Rasters.df_N_Nor, type = "prob"))
head(Rasters.df, n=2)
Rasters.df$Levels_ave<-p3_nb_spr$`predict(fit.nbAll, Rasters.df_N_Nor, type = "raw")`
head(Rasters.df, n=2)
ID<-read.csv("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images//Levels_key.csv", header = T)
# Join landuse ID
grid.new<-join(Rasters.df, ID, by="Levels_ave", type="inner")
# Omit missing values
grid.new.na<-na.omit(grid.new)
head(grid.new.na, n=2)
#Convert to raster
x<-SpatialPointsDataFrame(as.data.frame(grid.new.na)[, c("x", "y")], data = grid.new.na)
r_ave <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Level_ID")])
proj4string(r_ave)=CRS(projection(SAVISp))
spplot(r_ave)
r_ave_NB <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Level_ID")])
grid.new.na<-na.omit(grid.new)
View(grid.new.na)
grid.new.na<-na.omit(grid.new)
head(grid.new.na, n=2)
x<-SpatialPointsDataFrame(as.data.frame(grid.new.na)[, c("x", "y")], data = grid.new.na)
r_ave_NB <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Level_ID")])
proj4string(r_ave)=CRS(projection(SAVISp))
spplot(r_ave)
spplot(r_ave_XGB)
proj4string(r_ave_NB)=CRS(projection(SAVISp))
spplot(r_ave_NB)
Rasters.df
ID<-read.csv("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images//Levels_key.csv", header = T)
Rasters.df
ID
head(Rasters.df, n=2)
Rasters.df$Levels_ave<-p3_nb_spr$`predict(fit.nbAll, Rasters.df_N_Nor, type = "raw")`
head(Rasters.df)
Rasters.df$Levels_ave<-p3_nb_spr$predict(fit.nbAll, Rasters.df_N_Nor, type = "raw")
head(Rasters.df, n=2)
grid.new
Rasters.df$Levels_ave<-p3_nb_spr$`predict(fit.nbAll, Rasters.df_N_Nor, type = "raw")`
head(Rasters.df, n=2)
grid.new<-join(Rasters.df, ID, by="Levels_ave", type="inner")
ID<-read.csv("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images//Levels_key.csv", header = T)
grid.new<-join(Rasters.df, ID, by="Levels_ave", type="inner")
grid.new.na<-na.omit(grid.new)
Rasters.df$Levels_Moderate = p3_nb_spr$Moderate
Rasters.df$Levels_UHealSen = p3_nb_spr$UHealSen
x<-SpatialPointsDataFrame(as.data.frame(Rasters.df)[, c("x", "y")], data = Rasters.df)
r_ave_UHealSen <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Levels_UHealSen")])
proj4string(r_ave_UHealSen)=CRS(projection(NDVISp))
r_ave_Moderate <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Levels_Moderate")])
proj4string(r_ave_Moderate)=CRS(projection(NDVISp))
x<-SpatialPointsDataFrame(as.data.frame(Rasters.df)[, c("x", "y")], data = Rasters.df)
r_ave_UHealSen <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Levels_UHealSen")])
proj4string(r_ave_UHealSen)=CRS(projection(NDVISp))
r_ave_Moderate <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Levels_Moderate")])
proj4string(r_ave_Moderate)=CRS(projection(NDVISp))
spplot(r_ave_Moderate, main="Moderate NB")
spplot(r_ave_UHealSen, main="UHealSen NB")
spplot(r_ave_Moderate, main="Moderate NB")
writeRaster(r_ave_Moderate,filename="C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Probability_Map_Moderate_NB_Spr.tif", format="GTiff", overwrite=TRUE)
spplot(r_ave_UHealSen, main="UHealSen NB")
writeRaster(r_ave_UHealSen,filename="C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Probability_Map_UHealSen_NB_Spr.tif", format="GTiff", overwrite=TRUE)
control <- trainControl(method='repeatedcv',
number=10,
repeats=3)
param_grid = expand.grid(k = seq(1, 31, by = 2))
set.seed(1)
knn_grid = train(PM~B2Sp+ B3Sp+ B4Sp +B5Sp+B6Sp+ BUSp+ LSTSp+NDMISp+
NDVISp+SAVISp+Slope,
data=train.data,
method = "knn",
trControl = control,
tuneGrid = param_grid)
plot(knn_grid, main="KNN with different K values For Autumn")
plot(varImp(knn_grid))
knn_grid$results
summaryRes=knn_grid$results
summary(summaryRes)
plot(knn_grid, main="KNN with different K values For Spring")
set.seed(1)
param_grid = expand.grid(k=3)
knn_default = train(PM~B2Sp+ B3Sp+ B4Sp +B5Sp+B6Sp+ BUSp+ LSTSp+NDMISp+
NDVISp+SAVISp+Slope,
data=train.data,
method = "knn",
trControl = control,
tuneGrid = param_grid)
plot(fit.nb, main="KNN with different K values For Spring")
plot(fit.nb, main="NB with different K values For Spring")
plot(fit.xgb_train2)
fit.xgb_train2<- train(PM~B2Sp+ B3Sp+ B4Sp +B5Sp+B6Sp+ BUSp+ LSTSp+NDMISp+
NDVISp+SAVISp+Slope,
data=train.data,
method = "xgbTree",
metric= "Accuracy",
preProc = c("center", "scale"),
trControl = myControl,
tuneGrid = tune_grid2,
tuneLength = 10)
tune_grid2 <- expand.grid(nrounds = c(200,210),           # the max number of iterations INCREASE THE PROCESSING TIME COST
max_depth = c(6,18,22),            # depth of a tree EFFECTIVE OPTIMIZATION
eta = c(0.05,0.3,1),               # control the learning rate
gamma = c(0,0.01,0.1),             # minimum loss reduction required
colsample_bytree = c(0.75,1),  # subsample ratio of columns when constructing each tree
min_child_weight = c(0,1,2),     # minimum sum of instance weight (hessian) needed in a child
subsample = c(0.5,1))           # subsample ratio of the training instance
set.seed(849)
fit.xgb_train2<- train(PM~B2Sp+ B3Sp+ B4Sp +B5Sp+B6Sp+ BUSp+ LSTSp+NDMISp+
NDVISp+SAVISp+Slope,
data=train.data,
method = "xgbTree",
metric= "Accuracy",
preProc = c("center", "scale"),
trControl = myControl,
tuneGrid = tune_grid2,
tuneLength = 10)
fit.xgb_train2
p1_knn_default<-predict(knn_default, test.data, type = "raw")
confusionMatrix(p1_knn_default, as.factor(test.data_labels))
predictions_KNN_Sp = as.data.frame(predict(knn_default, test.data, type = "prob"))
predictions_KNN_Sp$predict = names(predictions_KNN_Sp)[1:2][apply(predictions_KNN_Sp[,1:2], 1, which.max)]
predictions_KNN_Sp$observed = test.data_labels
head(predictions_KNN_Sp)
roc.UHealSen = roc(ifelse(predictions_KNN_Sp$observed== "UHealSen", "UHealSen", "non-UHealSen"), as.numeric(predictions_KNN_Sp$UHealSen))
roc.Moderate = roc(ifelse(predictions_KNN_Sp$observed=="Moderate", "Moderate", "non-Moderate"), as.numeric(predictions_KNN_Sp$Moderate))
roc.KNN_Sp = roc(ifelse(predictions_KNN_Sp$observed== "UHealSen", "UHealSen", "non-UHealSen"), as.numeric(predictions_KNN_Sp$UHealSen))
plot(roc.KNN_Sp)
# Plot the ROC for the three model
plot(roc.KNN_Sp, col = "red", lwd = 2, main = "ROC Plot for Spring Season")
plot(roc.XGB_Sp, add = T, col = "green", lwd = 2)
plot(roc.NB_Sp, add = T, col = "blue", lwd = 2)
# Add AUC values
auc_KNN <- auc(roc.KNN_Sp)
auc_XGB <- auc(roc.XGB_Sp)
auc_NB <- auc(roc.NB_Sp)
legend("bottomright", c(paste("KNN (AUC =", round(auc_KNN, 2),")"),
paste("XGB (AUC =", round(auc_XGB, 2),")"),
paste("NB (AUC =", round(auc_NB, 2),")")),
col=c("red", "green", "blue"), lty=1, lwd=2)
original.n$PM=original$Av_Lev_Spr
set.seed(849)
k_values <- c(1, 3, 5)
tune_gridNaive2 <- expand.grid(k = k_values)
fit.KNNAll<- train(PM~B2Sp+ B3Sp+ B4Sp +B5Sp+B6Sp+ BUSp+ LSTSp+NDMISp+
NDVISp+SAVISp+Slope,
data=original.n,
method = "knn",
metric= "Accuracy",
tuneGrid=param_grid,
preProc = c("center", "scale"),
trControl = myControl)
fit.KNNAll$results
X.KNNAll = varImp(fit.KNNAll)
p3_knn_spr=as.data.frame(predict(fit.KNNAll, Rasters.df_N_Nor, type = "prob"))
summary(p3_knn_spr)
Rasters.df$Levels_Moderate = p3_knn_spr$Moderate
Rasters.df$Levels_UHealSen = p3_knn_spr$UHealSen
x<-SpatialPointsDataFrame(as.data.frame(Rasters.df)[, c("x", "y")], data = Rasters.df)
r_ave_UHealSen <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Levels_UHealSen")])
proj4string(r_ave_UHealSen)=CRS(projection(NDVISp))
r_ave_Moderate <- rasterFromXYZ(as.data.frame(x)[, c("x", "y", "Levels_Moderate")])
proj4string(r_ave_Moderate)=CRS(projection(NDVISp))
spplot(r_ave_Moderate, main="Moderate KNN")
writeRaster(r_ave_Moderate,filename="C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Probability_Map_Moderate_KNN_Spr.tif", format="GTiff", overwrite=TRUE)
spplot(r_ave_UHealSen, main="UHealSen KNN")
writeRaster(r_ave_UHealSen,filename="C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Probability_Map_UHealSen_KNN_Spr.tif", format="GTiff", overwrite=TRUE)
Rasters.df$Levels_ave<-p3_knn_spr$`predict(fit.KNNAll, Rasters.df_N_Nor, type = "raw")`
head(Rasters.df, n=2)
ID<-read.csv("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images//Levels_key.csv", header = T)
grid.new<-join(Rasters.df, ID, by="Levels_ave", type="inner")
# Open the folder
path = readClipboard()
setwd("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
getwd() # for checking
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(shap)
library(Information)
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(shap)
library(Information)
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(shap)
library(Information)
library(plyr)
library(dplyr)
library(ggplot2)
library(sp)
library(caret)
library(GGally)
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(shap)
library(Information)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
library(caret)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
library(caret)
library(RStoolbox)
install.packages("RStoolbox")
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
library(RStoolbox)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
library(caret)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
library(RStoolbox)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
.libPaths("C:/Users/user/Desktop/TROPHEE/Scientific training/Remote sensing method/Landsat_Images/Bosnia_Landsat")
sessionInfo()
# load packages
library(xgboost)
library(rgdal)        # spatial data processing
library(raster)       # raster processing
library(plyr)         # data manipulation
library(dplyr)        # data manipulation
library(RStoolbox)    # plotting spatial data
library(RColorBrewer) # color
library(ggplot2)      # plotting
library(sp)           # spatial data
library(caret)        # machine laerning
library(doParallel)   # Parallel processing
library(doSNOW)
library(e1071)
library(GGally)
library(klaR)
library(Information)
